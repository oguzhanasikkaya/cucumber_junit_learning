-MVP: MINIMUM VIABLE PRODUCT

-DDT: DATA DRIVEN TESTING FRAME WORK
    >Data Driven Testing: Execute the same test against different test daya
    >Data Driven Testing Framework: is the framework we are able to read data
     from external file and use it in our source code.
    >We can get the daya from:
        >MS Excel
        >Ms Access
        >Database
        >Features files
        >Configuration.properties
-Keyword Driven Testing:
    >Creating testing structure based on some keywords that are executable.
    >This requires a lot of time to invest in to even make it work, but also
        it is hard to maintain,and hard to scale since the object repository,
        and keyword repository have to me maintained and expanded as the framework
        gets bigger.
-TDD  : TEST DRIVEN DEVELOPMENT(BUG FREE DEVELOPMENT)
    >There is a repeating development  cycle with TDD
        1-Write tests before writing any source code.
        2-Run the tests, and tests will fail
        3-Write minimum amount of code to make the tests pass
        4-Run the tests, and tests will pass.
        5-REFACTOR AND REPEAT


-In TDD developers are writing @Test in the preferred PROGRAMMING LANGUAGE
-That's why it is not readable or understandable for the non-technical team members of the temam
-That's why we will be using BDD

-@Test (s) are written in programming language
-Scenarios are written in English in Gherkin language

-BDD has 2 layers
    >1 Business layer : FEATURES FILES
        >Features files will be storing the different features, scenarios, and re-usable
            steps in Gherkin language
        >Business side is mostly for collaborating with non-technical people
    >2 Implementation layer: STEP DEFINITIONS
        >Technical people implement the 'STEP DEFINITIONS' to convert step into concrete actions
--------------------------------------------------------------------------------------------------
-Why are we not using TestNG and using JUNIT?
    >1  Because the community mostly using Cucumber with JUNIT
        -more questions
        -more answers
        -more demand
        -more opportunities
    >2  We don't need all annotations coming from TestNG
-Is Cucumber a testing tool?
    >   No it is not. Cucumber just a BDD implementation tool.
    >   Therefore, it does not come with any assertions or any programming logic
    >   That's why we have to use the dependencies with "cucumber-java", "cucumber-junit"
        to be able to develop some programming logic and also be able to generate
        some test approach with assertions.

TestNG Assertions: Assert.assertTrue(boolean, "failure message")
JUNIT Assertions:  Assert.assertTrue("failure message", boolean)
--------------------------------------------------------------------------------------------------
- Dryrun: turns of the running of step_definitions.
-If I don't want to actually run my code, and just want to get my snippets for implementing,
    I will turn on by gibing "true" value

    dryRun = true --> do not run my step_definitions, but only check if any step is missing snippet
    dryRun = false --> this will turn off dryRun, and our code will run as expected






